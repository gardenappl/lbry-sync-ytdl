#!/bin/sh

_lbry_sync_ytdl_version="v1.4"

set -o errexit


options=y:b:c:hva:p
longopts=ytdl-options:,bid:,channel:,validate-video,help,optimize-video,version,api:,publish,orig-thumbnail,postprocessor-args:
parsed=$(getopt --options=$options --longoptions=$longopts --name "$0" -- "$@")
eval set -- "$parsed"

while true; do
	case "$1" in
		-a|--api )
			api_server="$2"
			shift 2
			;;
		-h|--help )
			help=y
			shift
			;;
		--orig-thumbnail )
			original_thumbnail=y
			shift
			;;
		-v|--version )
			version=y
			shift
			;;
		--optimize-video )
			optimize=y
			shift
			;;
		--validate-video )
			validate=y
			shift
			;;
		-c|--channel )
			channel="$2"
			shift 2
			;;
		-y|--ytdl-options )
			ytdl_options="$2"
			shift 2
			;;
		--postprocessor-args )
			postprocess_args="$2"
			shift 2
			;;
		-b|--bid )
			bid="$2"
			shift 2
			;;
		-- )
			shift
			break
			;;
		* )
			echo "Programming error: $1"
			exit 1
			;;
	esac
done

print_help() {
	echo \
"Usage: lbry-sync-ytdl URL [options...]

	-a, --api 			URL for lbyrnet API (e.g. \"https://localhost:5279\")
	-b, --bid 			Amount of LBC to deposit for each piece of content
	-c, --channel 			Name of publisher channel (e.g. \"@MyCoolChannel\")
	-h, --help 			Print help
	    --optimize-video 		Use FFmpeg to transcode video, ensuring common web browser support
	    --orig-thumbnail 		Use original thumbnail URL instead of re-uploading to LBRY/spee.ch
	    --postprocessor-args 	Set custom options for youtube-dl postprocessor (e.g. \"-strict -2\")
	    --validate-video 		Check if video needs to be transcoded for common web browser support, uses FFmpeg
	-v, --version 			Print version and exit
	-y, --ytdl-options 		Set custom options for youtube-dl (e.g. \"--playlist-start=10\")

If --bid is not provided, script will NOT publish anything, treat that as a test run.

If --channel is not provided, script will publish content anonymously.

If --api is not provided, script will use local LBRY installtion."
}

if [ -n "$help" ]; then
	print_help
	exit 0
elif [ -n "$version" ]; then
	echo "lbry-sync-ytdl $_lbry_sync_ytdl_version"
	exit 0
elif [ -z "$1" ]; then
	print_help
	exit 1
fi


lbrynet_check_error() {
	case "$1" in
		\{* )
			case "$1" in
				*'"error": '* )
					if message="$(echo "$1" | jq '.error.message' --exit-status --raw-output)"; then
						echo "LBRY daemon reported an error."
						echo "$message"
						exit 1
					else
						echo "Unknown error in LBRY daemon."
						echo "$1"
						exit 1
					fi
			esac
			;;
		* )
			echo "Unknown error in LBRY daemon."
			echo "$1"
			exit 1
			;;
	esac
}

is_running() {
	case "$1" in
		\{* )
			#If starts with {, assume valid JSON
			case "$1" in
				*'"is_running": true'* )
					return 0
					;;
			esac
			;;
	esac
	return 1
}

lbrynet_start_if_needed() {
	if ! pidof "lbrynet" > /dev/null; then
		printf "Starting LBRY daemon... "
		lbrynet start 2>/dev/null > /dev/null &
		while sleep 0.5; do
			lbrynet_status=$(lbrynet status)
			if is_running "$lbrynet_status"; then
				echo "Done."
				break
			fi
		done
	fi
}

get_local_lbrynet_config() {
	lbrynet_config=$(lbrynet settings get)
	lbrynet_check_error "$lbrynet_config"
	api_server=$(echo "$lbrynet_config" | jq -r '.api')
}


if [ -z "$api_server" ]; then
	if lbrynet version > /dev/null 2>&1; then
		lbrynet_start_if_needed
		get_local_lbrynet_config
	else
		echo "Error: no access to 'lbrynet' executable, and no API URL provided" >&2
		exit 1
	fi
fi

if [ -z "$bid" ]; then
	echo "Note: operating in test mode. Content is not actually being published."
	echo "Use the --bid option when you're sure you're ready to upload."
fi

if [ -n "$channel" ]; then
	channel="\"$channel\""
else
	channel=null
fi

if [ -n "$validate" ]; then
	validate_option=true
else
	validate_option=false
fi

if [ -n "$optimize" ]; then
	optimize_option=true
else
	optimize_option=false
fi


info_file="$(mktemp -t youtube-dl-info-XXXXXX.json)"
trap 'rm $info_file' EXIT
echo "Retrieving data with youtube-dl..."



if ! youtube-dl "$1" --postprocessor-args "$postprocess_args" --merge-output-format=mp4 $ytdl_options --print-json > "$info_file"; then
	ytdl_error=y
fi




# Read $info_file line by line: every line is a video file
while read -r line; do
	name="$(echo "$line" | jq '.title' --raw-output)"

	# get name in a format that can be used for LBRY URLs
	publish_name="$(echo "$name" | tr '[:upper:] ' '[:lower:]-' | tr --delete --complement '0-9a-zA-Z[=-=]' | tr --squeeze-repeats '-')"

	thumbnail_url="$(echo "$line" | jq '.thumbnail' --raw-output)"
	if [ -z "$original_thumbnail" ]; then
		echo "Downloading thumbnail: $thumbnail_url"

		thumb_file="$(mktemp -t youtube-dl-thumb-XXXXXX)"
		curl "$thumbnail_url" --output "$thumb_file" --silent

		echo "Uploading thumbnail to spee.ch..."
		speech_data="$(curl "https://spee.ch/api/claim/publish" --request POST -F "file=@$thumb_file" --silent)"
		rm "$thumb_file"

		thumbnail_url="$(echo "$speech_data" | jq '.data.serveUrl' --raw-output)"
	fi

	data="$(echo "$line" | jq \
		"{
			name: \"$publish_name\",
			channel_name: $channel,
			tags: .tags,
			license: .license,
			release_time: (.release_timestamp // .timestamp //
				try ((.release_date // .upload_date) | strptime(\"%Y%m%d\") | mktime) catch null
			),
			author: .uploader,
			title: .title,
			thumbnail_url: \"$thumbnail_url\",
			file_path: \"$PWD/\\(._filename)\",
			bid: \"$bid\",
			description: .description,
			validate_file: $validate_option,
			optimize_file: $optimize_option,
			blocking: true
		} | map_values(select(. != null))")"
	# strip null values because lbrynet can't handle them

	echo

	if [ -z "$bid" ]; then
		echo "This content would've been published if you'd supplied the --bid amount:"
		echo "$data" | jq
	else
		echo "Publishing \"$name\"..."
		result="$(curl --silent -d"{\"method\": \"publish\", \"params\": $data}" "$api_server")"

		#Print result
		lbrynet_check_error "$result"

		if url="$(echo "$result" | jq '.result.outputs | .[] | select(.type == "claim") | .permanent_url' --exit-status --raw-output)"; then
			echo "Published as $url"
		fi
	fi
done < "$info_file"

if [ -n "$bid" ]; then
	echo "Done. Please wait for a few minutes for claims to be processed by the network."
else
	echo "Done. Please verify that all the data is correct,"
	echo "then run the command again with the --bid option."
fi

if [ -n "$ytdl_error" ]; then
	printf "\033[31mWarning: youtube-dl had finished with an error!\033[0m\n"
	echo "If you're uploading a playlist, this might mean that some videos were unavailable."
	echo "Try running with '--ytdl-options \"--ignore-errors\"'."
	exit 1
fi
