#!/bin/sh

: <<=cut

=pod

=head1 NAME

lbry-sync-ytdl - Copy videos to LBRY


=head1 SYNOPSIS

B<lbry-sync-ytdl> [-b I<bid>] [-c I<channel>] I<videourl>


=head1 DESCRIPTION

B<lbry-sync-ytdl> copies videos from video sites (such as YouTube) to
the LBRY network.

=head1 OPTIONS

=over 4

=item B<-a> I<server>

=item B<--api> I<server>

User I<server> as LBRY server.


=item B<-b> I<bid>

=item B<--bid> I<bid>

Use I<bid> as bid.


=item B<-c> I<channel>

=item B<--channel> I<channel>

Publish to channel I<channel>.


=item B<-h>

=item B<--help>

Show help.


=item B<-l> I<lic>

=item B<--license> I<lic>

Use I<lic> as license.


=item B<-L> I<lang>

=item B<--language> I<lang>

Use I<lang> as language.


=item B<--no-optimize-video>

=item B<--optimize-video>

(Do not) optimize video.


=item B<-o>

=item B<--overwrite>

Overwrite claim.


=item B<--orig-thumbnail>

Use original thumbnail.


=item B<-q>

=item B<--quiet>

No info output.


=item B<-Q>

=item B<--really-quiet>

No info or error output.


=item B<--postprocessor-args> I<args>

Use I<args> for postprocessing.


=item B<-v>

=item B<--version>

Show version.


=item B<--validate-video>

Validate video.


=item B<-y> I<opts>

=item B<--ytdl-options> I<opts>

Use I<opts> as options for B<youtube-dl>.


=back


=head1 EXAMPLE

Copy video from YouTube to channel MyChannel

  lbry-sync-ytdl -b 1.0 -c @MyChannel https://youtu.be/OpaiGYxkSuQ

MyChannel must be created in LBRY.


=head1 AUTHOR

Copyright (C) 2020-2021 gardenappl, and Ole Tange.


=head1 LICENSE

Copyright (C) 2012 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
at your option any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


=head1 DEPENDENCIES

B<lbry-sync-ytdl> uses B<youtube-dl>, B<curl>, and B<lbrynet>.


=head1 SEE ALSO

B<youtube-dl>


=cut



_lbry_sync_ytdl_version="v1.7.2"

set -o errexit


options=y:b:c:hva:pnl:L:oqQ
longopts=ytdl-options:,bid:,channel:,validate-video,help,optimize-video,version,api:,publish,orig-thumbnail,postprocessor-args:,no-optimize-video,license:,language:,overwrite,quiet,really-quiet
parsed=$(getopt --options=$options --longoptions=$longopts --name "$0" -- "$@")
eval set -- "$parsed"

while true; do
	case "$1" in
		-a|--api )
			api_server="$2"
			shift 2
			;;
		-h|--help )
			help=y
			shift
			;;
		--orig-thumbnail )
			original_thumbnail=y
			shift
			;;
		-v|--version )
			version=y
			shift
			;;
		--no-optimize-video )
			no_optimize=y
			shift
			;;
		--optimize-video )
			print_info "Warning: --optimize-video option is deprecated, this script automatically optimizes video files. Use --no-optimize-video to cancel."
			shift
			;;
		--validate-video )
			print_info "Warning: --validate-video option is deprecated, this script automatically optimizes video files. Use --no-optimize-video to cancel."
			shift
			;;
		-c|--channel )
			channel="$2"
			shift 2
			;;
		-y|--ytdl-options )
			ytdl_options="$2"
			shift 2
			;;
		--postprocessor-args )
			postprocess_args="$2"
			shift 2
			;;
		-b|--bid )
			bid="$2"
			shift 2
			;;
		-l|--license )
			license="$2"
			shift 2
			;;
		-L|--language )
			language="$2"
			shift 2
			;;
		-o|--overwrite )
			overwrite=y
			shift
			;;
		-q|--quiet )
			quiet_info=y
			shift
			;;
		-Q|--really-quiet )
			quiet_info=y
			quiet_error=y
			shift
			;;
		-- )
			shift
			break
			;;
		* )
			print_error "Programming error: $1"
			exit 1
			;;
	esac
done


print_info() {
	if [ -z "$quiet_info" ]; then
		>&2 echo $@
	fi
}

print_error() {
	if [ -z "$quiet_error" ]; then
		>&2 echo $@
	fi
}


print_help() {
	echo \
"Usage: lbry-sync-ytdl URL [options...]

	-a, --api 			Custom URL for lbyrnet API (e.g. \"https://localhost:5279\")
	-b, --bid 			Amount of LBC to deposit for each piece of content
	-c, --channel 			Name of publisher channel (e.g. \"@MyCoolChannel\")
	-h, --help 			Print help
	-l, --license 			Add license information (overrides info from youtube-dl)
	-L, --language 			Add language tag, like \"en\" or \"uk-UA\"
	    --no-optimize-video 	Upload video as-is, don't let LBRY transcode it
	    --orig-thumbnail 		Use original thumbnail URL instead of re-uploading to LBRY/spee.ch
	-o, --overwrite 		Upload content even if a file with the same name exists on LBRY
	-q, --quiet 			No info output
	-Q, --really-quiet 		No info or error output
	    --postprocessor-args 	Set custom options for youtube-dl postprocessor, usually FFmpeg (e.g. \"-strict -2\")
	-v, --version 			Print version and exit
	-y, --ytdl-options 		Set custom options for youtube-dl (e.g. \"--playlist-start=10\")

If --bid is not provided, script will NOT publish anything, treat that as a test run.

If --channel is not provided, script will publish content anonymously."
}

if [ -n "$help" ]; then
	print_help
	exit 0
elif [ -n "$version" ]; then
	echo "lbry-sync-ytdl $_lbry_sync_ytdl_version"
	exit 0
elif [ -z "$1" ]; then
	print_help
	exit 1
fi


lbrynet_check_error() {
	case "$1" in
		\{* )
			case "$1" in
				*'"error": '* )
					if message="$(printf '%s' "$1" | jq '.error.message' --exit-status --raw-output)"; then
						print_error "LBRY daemon reported an error."
						print_error "$message"
						return 1
					else
						print_error "Unknown error in LBRY daemon."
						print_error "$1"
						return 1
					fi
			esac
			;;
		* )
			print_error "Unknown error in LBRY daemon."
			print_error "$1"
			return 1
			;;
	esac
}

is_running() {
	case "$1" in
		\{* )
			#If starts with {, assume valid JSON
			case "$1" in
				*'"is_running": true'* )
					return 0
					;;
			esac
			;;
	esac
	return 1
}

lbrynet_start_if_needed() {
	if ! pidof "lbrynet" > /dev/null; then
		print_info "Starting LBRY daemon... "
		lbrynet start 2>/dev/null > /dev/null &
		while sleep 0.5; do
			lbrynet_status=$(lbrynet status)
			if is_running "$lbrynet_status"; then
				print_info "Done."
				break
			fi
		done
	fi
}

get_local_lbrynet_config() {
	lbrynet_config=$(lbrynet settings get)
	lbrynet_check_error "$lbrynet_config" || exit 1
	api_server=$(printf '%s' "$lbrynet_config" | jq -r '.api')
}


if [ -z "$api_server" ]; then
	if lbrynet version > /dev/null 2>&1; then
		lbrynet_start_if_needed
		get_local_lbrynet_config
	else
		print_error "Error: no access to 'lbrynet' executable, and no API URL provided" >&2
		exit 1
	fi
fi

if [ -z "$bid" ]; then
	print_info "Note: operating in test mode. Content is not actually being published."
	print_info "Use the --bid option when you're sure you're ready to upload."
fi

if [ -n "$channel" ]; then
	channel="\"$channel\""
else
	channel=null
fi


info_dir="$(mktemp --directory lbry-sync-ytdl-info-XXXXXX)"
download_info_file="$(mktemp lbry-sync-ytdl-download-info-XXXXXX.json)"
mkfifo "$info_dir/fifo"
trap 'rm -r "$info_dir" && rm "$download_info_file"' EXIT



youtube-dl "$1" --dump-json > "$info_dir/fifo" &


# Read $info_dir/fifo line by line: every line is a video file

publish() {
	name="$(printf '%s' "$line" | jq '.title' --raw-output)"

	# get name in a format that can be used for LBRY URLs
	publish_name="$(printf '%s' "$name" | tr '[:upper:] ' '[:lower:]-' | tr --delete --complement '0-9a-zA-Z[=-=]' | tr --squeeze-repeats '-')"

	result="$(curl --silent -d"{\"method\": \"get\", \"params\": {\"uri\": \"$publish_name\"}}" "$api_server")"

	# Try to find already existing LBRY upload with the same name
	if [ -z "$overwrite" ]; then
		not_found=n
		if printf '%s' "$result" | jq '.result.error' --exit-status > /dev/null; then
			case "$result" in
				*'"error": "Failed to resolve'* )
					not_found=y
					;;
			esac
		fi
		if [ "$not_found" = n ]; then
			print_info "Skipping $name"
			print_info "Already published: $publish_name"
			skipped=y
			return
		fi
	fi


	url="$(printf '%s' "$line" | jq .webpage_url --raw-output)"
	print_info "Downloading $name... $url"

	if ! youtube-dl "$url" --postprocessor-args "$postprocess_args" --merge-output-format=mp4 $ytdl_options --print-json > "$download_info_file"; then
		ytdl_error=y
		return 1
	fi

	if ! thumbnail_url="$(jq '.thumbnail' --raw-output --exit-status < "$download_info_file")"; then
		print_info "\033[31mWarning: no thumbnail!\033[0m"
	elif [ -z "$bid" ]; then
		print_info "This is a test run, not uploading thumbnail..."
	elif [ -z "$original_thumbnail" ]; then
		print_info "Downloading thumbnail: $thumbnail_url"

		thumb_file="$(mktemp -t youtube-dl-thumb-XXXXXX)"
		curl "$thumbnail_url" --output "$thumb_file" --silent

		print_info "Uploading thumbnail to spee.ch..."
		speech_data="$(curl "https://spee.ch/api/claim/publish" --request POST -F "file=@$thumb_file" --silent)"
		rm "$thumb_file"

		thumbnail_url="$(printf '%s' "$speech_data" | jq '.data.serveUrl' --raw-output)"
		print_info "Uploaded as $thumbnail_url"
	fi

	if [ "$thumbnail_url" != 'null' ]; then
		thumbnail_url="\"$thumbnail_url\""
	fi

	if [ -n "$license" ]; then
		upload_license="\"$license\""
	else
		upload_license="null"
	fi

	if [ -n "$language" ]; then
		upload_language="\"$language\""
	else
		upload_language="null"
	fi

	data="$(jq \
		"{
			name: \"$publish_name\",
			channel_name: $channel,
			tags: .tags,
			languages: ((.formats | map(.language) + [ $upload_language ]) | map(select(. != null)) | unique),
			license: ($upload_license // .license),
			release_time: (.release_timestamp // .timestamp //
				try ((.release_date // .upload_date) | strptime(\"%Y%m%d\") | mktime) catch null
			),
			author: .uploader,
			title: .title,
			thumbnail_url: $thumbnail_url,
			file_path: \"$PWD/\\(._filename)\",
			bid: \"$bid\",
			description: .description,
			optimize_file: ((.vcodec != \"none\") and (\"$no_optimize\" != \"y\")),
			blocking: true
		} | map_values(select(. != null))" < "$download_info_file")"
	# strip null values because lbrynet can't handle them

	if [ -z "$bid" ]; then
		print_info "This content would've been published if you'd supplied the --bid amount:"
		printf '%s' "$data" | jq
	else
		print_info "Publishing \"$name\"..."
		result="$(curl --silent -d"{\"method\": \"publish\", \"params\": $data}" "$api_server")"

		#Print result
		lbrynet_check_error "$result" || return 1

		if url="$(printf '%s' "$result" | jq '.result.outputs | .[] | select(.type == "claim") | .permanent_url' --exit-status --raw-output)"; then
			print_info "Published as $url"
		fi
	fi
}


while read -r line; do
	for i in 1 2 3; do
		print_info
		if publish "$line"; then
			break;
		elif [ "$i" -lt 3 ]; then
			print_info "Failed to publish, wait a second..."
			sleep 1
			print_info "Attempt number $((i + 1))..."
		else
			print_info "Failed to publish file."
			if [ -n "$ytdl_error" ]; then
				print_info "If you're uploading a playlist, this might mean that some videos were unavailable."
			fi
			exit 1
		fi
	done
done < "$info_dir/fifo"



if [ -n "$bid" ]; then
	print_info "Done. Please wait for a few minutes for claims to be processed by the network."
else
	print_info "Done. Please verify that all the data is correct,"
	print_info "then run the command again with the --bid option."
fi

if [ -n "$skipped" ]; then
       print_info "\n\033[31mWarning: some videos got skipped!\033[0m"
       print_info "Some videos were skipped automatically because a video with the exact same upload name already exists on LBRY."
       print_info "Use --overwrite option to upload them."
fi

# Local Variables:
# mode: Shell
# tab-width: 4
# sh-basic-offset: 4
# End:
